# Problem Link :- https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1/?company[]=Amazon&company[]=Amazon&problemStatus=unsolved&difficulty[]=1&difficulty[]=2&page=1&sortBy=submissions&query=company[]AmazonproblemStatusunsolveddifficulty[]1difficulty[]2page1sortBysubmissionscompany[]Amazon
# Python Solution
# Time Complexity :- O(N*M)
# Space Complexity :- O(1)
# Auxillary Space of Recursion Stack

#User function Template for python3


'''

class Node:
    def __init__(self, d):
        self.data=d
        self.next=None
        self.bottom=None
        
'''

def flatten(root):
    def mergeLL(root1,root2):
        dummy=Node(-1)
        temp=dummy
        res=dummy
        while root1!=None and root2!=None:
            if root1.data<root2.data:
                temp.bottom=root1
                root1=root1.bottom
            else:
                temp.bottom=root2
                root2=root2.bottom
            temp=temp.bottom
        
        if root1!=None:
            temp.bottom=root1
        else:
            temp.bottom=root2
        return res.bottom
    
    def recursion(root):
        if root==None or root.next==None:
            return root
        root.next=recursion(root.next)
        root=mergeLL(root,root.next)
        
        return root
    return recursion(root)
