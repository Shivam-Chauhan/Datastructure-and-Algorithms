# Problem Link :- https://leetcode.com/problems/median-of-two-sorted-arrays/
# Python Solution 
# Reference @Striver's Binary Search Playlist
# Time Complexity :- O((Log(N))
# Space Complexity :- O(1)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums2)<len(nums1): return self.findMedianSortedArrays(nums2,nums1)
        
        n1=len(nums1)
        n2=len(nums2)
        low,high=0,n1
        while low<=high:
            cut1=(low+high)>>1
            cut2=(n2+n1)//2-cut1
            left1=-10**9 if cut1==0 else nums1[cut1-1]
            left2=-10**9 if cut2==0 else nums2[cut2-1]
            right1=10**9 if cut1==n1 else nums1[cut1]
            right2=10**9 if cut2==n2 else nums2[cut2]
            if left1<=right2 and left2<=right1:
                return min(right1,right2) if (n1+n2)&1 else (max(left1,left2)+min(right1,right2))/2
            elif left1>right2:
                high=cut1-1
            else:
                low=cut1+1
        return 0.0
