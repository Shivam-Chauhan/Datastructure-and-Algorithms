# Problem Link :- https://www.techiedelight.com/determine-undirected-graph-tree-acyclic-connected-graph/
# Python Solution
# Time Complexity :- O(N+E)
# Space Complexity :- O(N+E)

# Check if A graph is a Tree
def checkTree(graph,visited,src,parent):
    visited[src]=1
    for node in graph[src]:
        if visited[node]==0:
            if not checkTree(graph,visited,node,src):
                return False
        elif node!=parent:
            return False
    return True

def isTree():
    graph={
        1:[2],
        2:[1],
        3:[4,7],
        4:[3,5],
        5:[4,6],
        6:[5],
        7:[3,8],
        8:[7],
#         9:[6,8]
    }

    length=len(graph)
    visited=[0]*(length+1)
    ct=0
    for i in range(1,length+1):
        if visited[i]==0:
            ct+=1
            if not checkTree(graph,visited,i,-1):
                return False
    return True if ct==1 else False


isTree()
