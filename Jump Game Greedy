# Link :- https://leetcode.com/problems/jump-game/submissions
# Python Code


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Brute Force
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)==1:
            return True
        array=[False]*(len(nums))
        maxi=0
        for i in range(len(nums)):
            if nums[i]:
                if maxi<i+nums[i]+1:
                    for j in range(i,i+nums[i]+1):
                        if j<len(array):
                            array[j]=True
                    maxi=i+nums[i]+1
            else:
                if (i!=len(nums)-1 and array[i+1]==False) or (i==0 and nums[i]==0) :
                    return False
        return True

#O(N^2) Time complexity
# O(N) Space Complexity
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Optimal Solution 

class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        maxi_reach=0
        for i in range(len(nums)):
            if i>maxi_reach:
                return False
            maxi_reach=max(maxi_reach,i+nums[i])
            
        return maxi_reach>=len(nums)-1
  
#O(N) Time complexity
# O(1) Space Complexity

        
