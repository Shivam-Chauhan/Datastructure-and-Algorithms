# Problem Link :- https://leetcode.com/problems/binary-tree-maximum-path-sum/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- O(1)


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        def pathSumBTree(root):
            if root==None: return 0
            
            l=pathSumBTree(root.left)
            r=pathSumBTree(root.right)
            temp=max(max(l,r)+root.val,root.val)
            ans=max(temp,l+r+root.val)
            self.res=max(self.res,ans)
            
            return temp
        self.res=-10**9
        pathSumBTree(root)
        return self.res
