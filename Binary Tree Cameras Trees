# Problem Link :- https://leetcode.com/problems/binary-tree-cameras/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- O(1)
# Auxillary Space of Recursion Stack

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def minCameraCover(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.counter=0
        def camerafinder(root):
            if root==None: return 1;
            leftchild=camerafinder(root.left)
            rightchild=camerafinder(root.right)
            if leftchild==-1 or rightchild==-1:
                self.counter+=1
                return 0
            if leftchild==0 or rightchild==0:
                return 1
            return -1
        temp=camerafinder(root)
        return self.counter + (1 if temp==-1 else 0)
            
