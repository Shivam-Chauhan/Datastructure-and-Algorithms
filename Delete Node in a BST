# Problem Link :- https://leetcode.com/problems/delete-node-in-a-bst/
# Python Solution
# Time Complexity :- O(Log(N))
# Space Complexity :- O(1)
-----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        def rightFinderUtil(root):
            while root.right!=None:
                root=root.right
            return root
        def deleteANodeBSTUtil(root):
            if root.left==None:
                return root.right
            elif root.right==None:
                return root.left
            rightChild=root.right
            rightestFinder=rightFinderUtil(root.left)
            rightestFinder.right=rightChild
            return root.left

        def deleteANodeInBST(root,key):
            if root==None:
                return 
            if root.val==key:
                return deleteANodeBSTUtil(root)

            dummy=root
            while root!=None:
                if root.val>key:
                    if root.left!=None and root.left.val==key:
                        root.left=deleteANodeBSTUtil(root.left)
                        break
                    else:
                        root=root.left
                else:
                    if root.right!=None and root.right.val==key:
                        root.right=deleteANodeBSTUtil(root.right)
                        break
                    else:
                        root=root.right

            return dummy
        return deleteANodeInBST(root,key)
