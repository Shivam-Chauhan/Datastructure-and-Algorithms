# Problem Link :- https://leetcode.com/problems/minimum-distance-between-bst-nodes/
# Python Solution
# Time Complexity :- O(N+E)+O(N)
# Space Complexity :- O(N) and Auxillary space for DFS implementation

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def minDiffInBST(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.array=[]
        def dfs(root):
            if root==None:
                return 
            dfs(root.left)
            self.array.append(root.val)
            dfs(root.right)
            
        dfs(root)
        mini=10**9
        for j in range(len(self.array)-1):
            mini=min(mini,self.array[j+1]-self.array[j])
        return mini
            
        
