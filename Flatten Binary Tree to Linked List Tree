# Problem Link :- https://leetcode.com/problems/flatten-binary-tree-to-linked-list/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- Auxillary Space of Recursion calls

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        self.prev=None
        def preorder_reversal(root):
            if root==None: return None
            
            preorder_reversal(root.right)
            preorder_reversal(root.left)
            root.right=self.prev
            root.left=None
            self.prev=root
        preorder_reversal(root)
        
