# Problem Link :- https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- O(1)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def LCA(root,p,q):
            if root==None: return None
            if root.val==p.val or root.val==q.val: return root
            leftChild=LCA(root.left,p,q)
            rightChild=LCA(root.right,p,q)
            
            if leftChild is not None and rightChild is not None: return root
            
            
            return leftChild if leftChild is not None else rightChild
        
        return LCA(root,p,q)
            
