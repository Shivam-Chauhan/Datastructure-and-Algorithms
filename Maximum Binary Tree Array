# Problem Link :- https://leetcode.com/problems/maximum-binary-tree/
# Python Solution
# Time Complexity :- O(N*N)
# Space Complexity :- O(1)
# Auxillary Space of Recursion Stack

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def constructMaximumBinaryTree(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        

        def builder(nums,start,end):
            if start>end: return 
            maxi=-10**9
            pos=-1
            for j in range(start,end+1):
                if maxi<nums[j]:
                    maxi,pos=nums[j],j
            root=TreeNode(maxi)
            root.left=builder(nums,start,pos-1)
            root.right=builder(nums,pos+1,end)


            return root
        return builder(nums,0,len(nums)-1)
