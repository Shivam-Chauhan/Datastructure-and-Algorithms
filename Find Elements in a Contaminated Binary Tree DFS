# Problem Link :- https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/
# Python Solution
# Time Complexity :- O(N) (Nodes in Binary Tree)
# Space Complexity :- O(N) (Nodes in Binary Tree)
# Auxillary Space of Recursion Stack


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class FindElements(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.seen=set()
        def dfs(node: TreeNode, v: int) -> None:
            if node:
                node.val=v
                self.seen.add(v)
                dfs(node.left,2*v+1)
                dfs(node.right,2*v+2)
        dfs(root,0)
                
        

    def find(self, target):
        """
        :type target: int
        :rtype: bool
        """
        return True if target in self.seen else False
            
        


# Your FindElements object will be instantiated and called as such:
# obj = FindElements(root)
# param_1 = obj.find(target)
