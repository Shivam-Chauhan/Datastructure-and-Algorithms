# Problem Link :- https://leetcode.com/problems/sliding-puzzle/
# Python Solution
# Time Complexity :- O(N*M)
# Space Complexity :- O(N) O(N+M)

class Solution:
    def slidingPuzzle(self, grid: List[List[int]]) -> int:
        def swapperFunc(string, targetIndx,zeroIndx):
            list1=list(string)
            list1[targetIndx],list1[zeroIndx]=list1[zeroIndx],list1[targetIndx]
            return "".join(list1)

        target="123450"
        stri=""
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                stri+=str(grid[i][j])
        swapper={
            0:[1,3],
            1:[0,2,4],
            2:[1,5],
            3:[0,4],
            4:[1,3,5],
            5:[2,4]
        }
        queue,st=[],set()
        queue.append(stri)
        st.add(stri)
        level=0
        while len(queue):
            size=len(queue)
            while size:
                rem=queue.pop(0)
                if rem==target:
                    return level
                indx=rem.index("0")
                for i in swapper[indx]:
                    var=swapperFunc(rem,i,indx)
                    if var not in st:
                        st.add(var)
                        queue.append(var)

                size-=1
            level+=1
        return -1
        
