# Problem Link :- https://leetcode.com/problems/binary-tree-postorder-traversal/
# Python Solution 
# Time Complexity :- O(N)
# Space Complexity :- Stack Space of recursion otherwise it is O(1)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        self.output=[]
        def postorder(root):
            if root!=None:
                postorder(root.left)
                postorder(root.right)
                self.output.append(root.val)
        postorder(root)
        return self.output
            
            
                
        
