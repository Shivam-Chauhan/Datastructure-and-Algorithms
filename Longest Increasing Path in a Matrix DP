# Problem Link :- https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
# Python Solution
# Time Complexity :- O(N*M)
# Space Complexity :- O(N*M)
-----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   

class Solution:
    def longestIncreasingPath(self, grid: List[List[int]]) -> int:
        def increasingPath(grid,x,y,dp):
    
            if dp[x][y]==0:
                maxi=1+max(increasingPath(grid,x+1,y,dp) if x+1<len(grid) and grid[x][y]<grid[x+1][y] else 0,
                           increasingPath(grid,x-1,y,dp) if x-1>=0 and grid[x][y]<grid[x-1][y] else 0,
                           increasingPath(grid,x,y+1,dp) if y+1<len(grid[0]) and grid[x][y]<grid[x][y+1] else 0,
                           increasingPath(grid,x,y-1,dp) if y-1>=0 and grid[x][y]<grid[x][y-1] else 0)
                dp[x][y]=maxi
            return dp[x][y]

    
        dp=[[0 for i in range(len(grid[0]))] for j in range(len(grid))]
        res=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                dp[i][j]=increasingPath(grid,i,j,dp)
                res=max(res,dp[i][j])
        return res

