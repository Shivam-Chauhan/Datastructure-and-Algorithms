# Problem Link :- https://leetcode.com/problems/diameter-of-binary-tree/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- O(1)
# Auxillary Space of Recursion 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        def diameterBTree(root):
            if root==None: return 0
            left_height=diameterBTree(root.left)
            right_height=diameterBTree(root.right)
            self.res=max(self.res,left_height+right_height)
            return 1+max(left_height,right_height)
        
        self.res=-10**9
        diameterBTree(root)
        return self.res
