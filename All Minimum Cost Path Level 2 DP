Problem Statement :- https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/minimum-cost-path-re-official/ojquestion
Python Solution

class pairs:
    def __init__(self,x,y,string):
        self.x=x
        self.y=y
        self.string=string
        

list1=[[2,6,1,1,3],[9,1,1,0,5],[0,7,5,2,0],[4,3,0,4,7],[2,0,1,4,1]]
grid=[[0 for j in range(len(list1[0]))] for i in range(len(list1))]
for i in range(len(list1)-1,-1,-1):  
    for j in range(len(list1[0])-1,-1,-1):
        if i==len(list1)-1 and j==len(list1[0])-1:
            grid[i][j]=list1[i][j]
        
        elif i==len(list1)-1:
            grid[i][j]=grid[i][j+1]+list1[i][j]
            
        elif j==len(list1[0])-1:
            grid[i][j]=grid[i+1][j]+list1[i][j]
        
        else:
            grid[i][j]=min(grid[i][j+1],grid[i+1][j])+list1[i][j]
print(grid[0][0])

queue=[]
queue.append(pairs(0,0,""))
while len(queue)>0:
    rem=queue.pop(0)
    if rem.x==len(grid)-1 and rem.y==len(grid[0])-1:
        print(rem.string)                                   # Printing 
        
    elif rem.x==len(grid)-1:
        queue.append(pairs(rem.x,rem.y+1,rem.string+"H"))  
    
    elif rem.y==len(grid[0])-1:
        queue.append(pairs(rem.x+1,rem.y,rem.string+"V"))
    else:
        if grid[rem.x][rem.y+1]<grid[rem.x+1][rem.y]:
            queue.append(pairs(rem.x,rem.y+1,rem.string+"H"))
        elif grid[rem.x][rem.y+1]>grid[rem.x+1][rem.y]:
            queue.append(pairs(rem.x+1,rem.y,rem.string+"V"))
        else:
            queue.append(pairs(rem.x,rem.y+1,rem.string+"H"))
            queue.append(pairs(rem.x+1,rem.y,rem.string+"V"))
        
    

