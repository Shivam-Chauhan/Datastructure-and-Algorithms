# Problem Link :- https://leetcode.com/problems/range-sum-query-2d-immutable/
# Python Solution
# Time Complexity :- O(N*M)
# Space Complexity :- O(N*M)
-----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   

class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.grid=matrix
        self.dp=[[0 for j in range(len(self.grid[0]))] for i in range(len(self.grid))]
        self.dp[0][0]=self.grid[0][0]
        for i in range(1,len(self.grid)):
            self.dp[i][0]+=self.grid[i][0]+self.dp[i-1][0]
        for j in range(1,len(self.grid[0])):
            self.dp[0][j]+=self.grid[0][j]+self.dp[0][j-1]
        for i in range(1,len(self.grid)):
            for j in range(1,len(self.grid[0])):
                self.dp[i][j]+=self.dp[i-1][j]+self.dp[i][j-1]+self.grid[i][j]-self.dp[i-1][j-1]
    
    def sumRegion(self, r1: int, c1: int, r2: int, c2: int) -> int:
        res=self.dp[r2][c2]
        if r1>0:
            res-=self.dp[r1-1][c2]
        if c1>0:
            res-=self.dp[r2][c1-1]
        if r1>0 and c1>0:
            res+=self.dp[r1-1][c1-1]
        return res

        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
