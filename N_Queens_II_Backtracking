# Problem Link :- https://leetcode.com/problems/n-queens-ii
# Python Solution
# Time Complexity :- 
# Space Complexity :- O(3*N)+O(N*N)
# Auxillary Space

class Solution:
    def totalNQueens(self, n: int) -> int:
        self.ct=0
        def solve(grid,row,cols,ndiag,rdiag):
            if row==len(grid):
                self.ct+=1
                return 
            for col in range(0,len(grid)):
                if cols[col]==False and ndiag[row+col]==False and rdiag[row-col+len(grid)-1]==False:
                    grid[row][col]=1
                    cols[col]=True
                    ndiag[col+row]=True
                    rdiag[row-col+len(grid)-1]=True
                    solve(grid,row+1,cols,ndiag,rdiag)
                    grid[row][col]=0
                    cols[col]=False
                    ndiag[col+row]=False
                    rdiag[row-col+len(grid)-1]=False
        
        cols=[False]*n
        ndiag=[False]*(2*n-1)
        rdiag=[False]*(2*n-1)
        grid=[[0 for j in range(n)] for i in range(n)]
        solve(grid,0,cols,ndiag,rdiag)
        
        return self.ct
