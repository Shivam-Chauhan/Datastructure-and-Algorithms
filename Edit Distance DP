# Link :- https://leetcode.com/problems/edit-distance/
# Python Solution (Recursive)

def edit_distance(num,num1,n,m,ca,cd,ct):
    if n==0:
        return m
    if m==0:
        return n
    if num[n-1]==num1[m-1]:
        return edit_distance(num,num1,n-1,m-1,ca,cd,ct)
    return min(edit_distance(num,num1,n,m-1,ca,cd,ct)+ca,edit_distance(num,num1,n-1,m,ca,cd,ct)+cd,edit_distance(num,num1,n-1,m-1,ca,cd,ct)+ct)
num="pqqrst"
num1="qqttps"
ca,cd,ct=1,2,3
n=len(num)
m=len(num1)
edit_distance(num,num1,n,m,ca,cd,ct)




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Python Solution (Iterative)

num="pqqrst"
num1="qqttps"
ca,cd,ct=1,2,3
n=len(num)
m=len(num1)
dp=[[0 for j in range(m+1)] for i in range(n+1)]
for i in range(n+1):
    dp[i][0]=i
for j in range(m+1):
    dp[0][j]=j
    
for i in range(1,n+1):
    for j in range(1,m+1):
        if num[i-1]==num1[j-1]:
            dp[i][j]=dp[i-1][j-1]
        else:
            dp[i][j]=min(dp[i][j-1]+ca,dp[i-1][j]+cd,dp[i-1][j-1]+ct)
for i in range(n+1):
    for j in range(m+1):
        print(dp[i][j],end=" ")
    print()
            
