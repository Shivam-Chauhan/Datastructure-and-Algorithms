# Problem Link :- https://leetcode.com/problems/letter-combinations-of-a-phone-number/submissions/
# Python Solution
# Time Complexity :- O(2^N)
# Space Complexity :- O(N) + O(N)

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        def combinationFinder(keypad,keys,indx,result,combi):
            if indx==-1:
                if result!="":
                    combi.add(result)
                result=""
                return
            for i in keypad[keys[indx]]:
                combinationFinder(keypad,keys,indx-1,i+result,combi)
    

        keypad = {
            # 0 and 1 digit don't have any characters associated
            2: ['a', 'b', 'c'],
            3: ['d', 'e', 'f'],
            4: ['g', 'h', 'i'],
            5: ['j', 'k', 'l'],
            6: ['m', 'n', 'o'],
            7: ['p', 'q', 'r', 's'],
            8: ['t', 'u', 'v'],
            9: ['w', 'x', 'y', 'z']
        }
        keys = list(map(int,list(digits)))
        indx=len(keys)
        result=""
        combi=set()
        combinationFinder(keypad,keys,indx-1,result,combi)
        return list(combi)
