# Problem Link :- https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
# Python Solution 
# Time Complexity :- O(N)
# Space Complexity :- Auxillary Space of Recursion

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.value=0
        def dfs(root,p,q):
            if root==None or p==None or q==None: return None
            
            if root.val>p.val and root.val<q.val:
                self.value=root
            elif root.val>p.val and root.val>q.val:
                dfs(root.left,p,q)
            elif root.val<p.val and root.val<q.val:
                dfs(root.right,p,q)
            else:
                self.value=root
        dfs(root,p,q)
        
        return self.value
