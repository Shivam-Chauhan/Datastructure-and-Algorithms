# Problem Link :- https://leetcode.com/problems/binary-search-tree-iterator/
# Python Solution
# Time Complexity :- O(1)
# Space Complexity :- O(H)
# Auxillary Space of Recursion Stack
-----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.stack=[]
        self.pushElements(root)
    
    def next(self) -> int:
        element=self.stack.pop()
        self.pushElements(element.right)
        return element.val

    def hasNext(self) -> bool:
        return True if len(self.stack)!=0 else False
    def pushElements(self,root):
        while root!=None:
            self.stack.append(root)
            root=root.left
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
