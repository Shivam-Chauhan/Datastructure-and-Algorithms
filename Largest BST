# Problem Link :- https://practice.geeksforgeeks.org/problems/largest-bst/1/
# Python Solution
# Time Complexity :- O(N)
# Space Complexity :- O(1)
# Auxillary Space of Recursion Stack
-----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   -----------------  -----------------   
#User function Template for python3

class InfoNode:
    def __init__(self,mini,maxi,size):
        self.mini=mini
        self.maxi=maxi
        self.size=size
        
class Solution:
    # Return the size of the largest sub-tree which is also a BST
    def largestBst(self, root):
        def largestBstUtil(root):
            if root==None:
                return InfoNode(10**9,-10**9,0)
            lefty=largestBstUtil(root.left)
            righty=largestBstUtil(root.right)
            if root.data>lefty.maxi and root.data<righty.mini:
                return InfoNode(min(root.data,lefty.mini), max(root.data,righty.maxi),1+lefty.size+righty.size)
            return InfoNode(-10**9,10**9,max(lefty.size,righty.size))
        return largestBstUtil(root).size
