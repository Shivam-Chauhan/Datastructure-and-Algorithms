# Link :- https://leetcode.com/problems/implement-trie-prefix-tree/
# Python Solution
# @Reference is taken by louis925


class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.node={}
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        curr=self.node
        for s in word:
            if s not in curr:
                curr[s]={}
            curr=curr[s]
        curr["#"]=""
        

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        curr=self.node
        for s in word:
            if s not in curr:
                return False
            curr=curr[s]
        return "#" in curr
        

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr=self.node
        for p in prefix:
            if p not in curr:
                return False
            curr=curr[p]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)




