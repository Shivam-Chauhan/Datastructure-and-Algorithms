# Problem Link :- https://leetcode.com/problems/surrounded-regions/
# Python Solution
# Time Complexity :- O(M*N)
# Space Complexity :- O(1)
# Auxillary Space of Recursion

class Solution(object):
    def solve(self, board):
        def dfs(board,x,y):
            if x<0 or y<0 or x>=len(board) or y>=len(board[0]) or board[x][y]!="O":
                return
            board[x][y]="#"
            dfs(board,x+1,y)
            dfs(board,x-1,y)
            dfs(board,x,y+1)
            dfs(board,x,y-1)
    
        n=len(board)-1
        m=len(board[0])-1
        for row in range(len(board)):
            if board[row][0]=="O":
                dfs(board,row,0)
            if board[row][m]=="O":
                dfs(board,row,m)
        for col in range(len(board[0])):
            if board[0][col]=="O":
                dfs(board,0,col)
            if board[n][col]=="O":
                dfs(board,n,col)
        for i in range(n+1):
            for j in range(m+1):
                if board[i][j]=="#":
                    board[i][j]="O"
                elif board[i][j]=="O":
                    board[i][j]="X"
        return board
